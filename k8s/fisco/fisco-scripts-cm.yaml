apiVersion: v1
data:
  front-start.sh: |-
    #!/usr/bin/env bash

    # this script used in docker-compose
    echo "start webase-front now..."
    cp -r /dist/sdk/* /dist/conf/
    echo "finish copy sdk files to front's conf dir"
    #使用nsloopup命令获取主机 fisco-bcos 的ip 地址
    FISCO_BCOS_IP=`nslookup ${SDK_IP} | grep Address | tail -n 1 | awk '{print $2}'`
    # 截取 FISCO_BCOS_IP 中#号之前的字符串
    FISCO_BCOS_IP=${FISCO_BCOS_IP%#*}
    echo "FISCO_BCOS_IP is ${FISCO_BCOS_IP}"
    echo "SDK_IP is ${SDK_IP}" "KEY_SERVER is ${KEY_SERVER}"
    # 使用sed 将包含keyServer的行替换为keyServer的值
    sed -i "s/keyServer: .*/keyServer: ${KEY_SERVER}/g" /dist/conf/application.yml
    # 使用sed 命令将 空格空格ip: 行替换为 空格空格ip: ${FISCO_BCOS_IP}
    sed -i "s/  ip:.*/  ip: ${FISCO_BCOS_IP}/g" /dist/conf/application.yml
    # 输出application.yml文件
    cat /dist/conf/application.yml

    # 将环境变量 SDK_IP 设置为 FISCO_BCOS_IP
    export SDK_IP=${FISCO_BCOS_IP}

    java ${JAVA_OPTS} -Djdk.tls.namedGroups="secp256k1", -Duser.timezone="Asia/Shanghai" -Djava.security.egd=file:/dev/./urandom, -Djava.library.path=/dist/conf -cp ${CLASSPATH}  ${APP_MAIN}
  mgr-start.sh: "#!/usr/bin/env bash\n\nsed -i \"s/  webaseSignAddress: .*/  webaseSignAddress:
    ${WEBASE_SIGN_IP}/g\" /dist/conf/application-docker.yml\n\necho \"application-docker.yml\"\ncat
    /dist/conf/application-docker.yml\n\n# sql start with\n# mysql -u${WEBASE_DB_UNAME}
    -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT} -e 'use ${WEBASE_DB_NAME}'\n#
    init db if not exist\necho \"check database of ${WEBASE_DB_NAME}\"\necho \"using
    u ${WEBASE_DB_UNAME} p ${WEBASE_DB_PWD} -h ${WEBASE_DB_IP} -P ${WEBASE_DB_PORT}\"\n\nuseCommand=\"use
    ${WEBASE_DB_NAME}\"\ncreateCommand=\"create database ${WEBASE_DB_NAME} default
    character set utf8\"\n# echo \"run command: [mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD}
    -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT} -e ${useCommand}]\"\n# echo \"run command:
    [mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT}
    -e ${createCommand}]\"\n\nwhile true ; do\n    #command\n    sleep 1\n    echo
    \"check mysql status...\"\n    echo \"select version();\" | mysql -u${WEBASE_DB_UNAME}
    -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT}\n    if [ $? == 0 ] ;
    then\n        echo \"mysql is on\"\n        break;\n    else\n        (( ex_count
    = ${ex_count} + 1 ))\n        echo \"Waiting mysql to start! ex_count = ${ex_count}.\"\n
    \       if [ ${ex_count} -ge 10 ]; then\n            echo \"Connect to mysql timeout
    failed!\"\n            break;\n        fi\n    fi\ndone\n\necho \"${useCommand}\"
    | mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT}\nif
    [ $? == 0 ]; then\n    echo \"database of [${WEBASE_DB_UNAME}] already exist,
    skip init\"\nelse\n    # if return 1(db not exist), create db\n    echo \"now
    create database [${WEBASE_DB_NAME}]\"\n    echo \"${createCommand}\" | mysql -u${WEBASE_DB_UNAME}
    -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT} --default-character-set=utf8\n
    \   if [ $? == 0 ]; then\n        echo \"======== create database success!\"\n
    \       echo \"now create tables\"\n        # sed /dist/script/webase.sh\n        #
    sed -i \"s:defaultAccount:${WEBASE_DB_UNAME}:g\" /dist/script/webase.sh\n        #
    sed -i \"s:defaultPassword:${WEBASE_DB_PWD}:g\" /dist/script/webase.sh\n        #
    create table\n        mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP}
    -P${WEBASE_DB_PORT} -D ${WEBASE_DB_NAME} --default-character-set=utf8 -e \"source
    /dist/script/webase-ddl.sql\"\n        if [ $? == 0 ]; then\n            echo
    \"now init table data\"\n            mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD}
    -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT} -D ${WEBASE_DB_NAME} --default-character-set=utf8
    -e \"source /dist/script/webase-dml.sql\"\n            if [ $? == 0 ]; then\n
    \               echo \"======== init table data success!\"\n            else \n
    \               echo \"======= int table data of [webase-dml.sql] failed!\"\n
    \           fi\n        else \n            echo \"  ======= create tables of [webase-ddl.sql]
    failed!\"\n        fi\n    else \n        echo \"======= create database of [${WEBASE_DB_NAME}]
    failed!\"\n    fi\nfi\n\n\n# this script used in docker-compose\necho \"start
    webase-node-mgr now...\"\njava ${JAVA_OPTS} -Djdk.tls.namedGroups=\"secp256k1\",
    -Duser.timezone=\"Asia/Shanghai\" -Djava.security.egd=file:/dev/./urandom, -Djava.library.path=/dist/conf
    -cp ${CLASSPATH}  ${APP_MAIN}"
  sign-start.sh: "#!/usr/bin/env bash\n\n# sql start with\n# mysql -u${WEBASE_DB_UNAME}
    -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT} -e 'use ${WEBASE_DB_NAME}'\n#
    init db if not exist\necho \"check database of ${WEBASE_DB_NAME}\"\necho \"using
    u ${WEBASE_DB_UNAME} p ${WEBASE_DB_PWD} -h ${WEBASE_DB_IP} -P ${WEBASE_DB_PORT}\"\nuseCommand=\"use
    ${WEBASE_DB_NAME}\"\ncreateCommand=\"create database ${WEBASE_DB_NAME} default
    character set utf8;\"\n# echo \"run command: [mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD}
    -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT} -e ${useCommand}]\"\n# echo \"run command:
    [mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT}
    -e ${createCommand}]\"\n\n\nwhile true ; do\n    #command\n    sleep 1\n    echo
    \"check mysql status...\"\n    echo \"select version();\" | mysql -u${WEBASE_DB_UNAME}
    -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT} \n    if [ $? == 0 ]
    ; then\n        echo \"======== mysql is on\"\n        break;\n    else\n        ((
    ex_count = ${ex_count} + 1 ))\n        echo \"Waiting mysql to start! ex_count
    = ${ex_count}.\"\n        if [ ${ex_count} -ge 10 ]; then\n            echo \"========
    Connect to mysql timeout failed!\"\n            break;\n        fi\n    fi\ndone\n\necho
    \"${useCommand}\" | mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP}
    -P${WEBASE_DB_PORT} \nif [ $? == 0 ]; then\n    echo \"database of [${WEBASE_DB_UNAME}]
    already exist, skip init\"\nelse\n    # if return 1(db not exist), create db\n
    \   echo \"now create database [${WEBASE_DB_NAME}]\"\n    echo \"${createCommand}\"
    | mysql -u${WEBASE_DB_UNAME} -p${WEBASE_DB_PWD} -h${WEBASE_DB_IP} -P${WEBASE_DB_PORT}
    --default-character-set=utf8\n    if [ $? == 0 ]; then\n        echo \"========create
    database success!\"\n    else\n        echo \"======== create database of [${WEBASE_DB_NAME}]
    failed!\"\n    fi\nfi\n\n# this script used in docker-compose\necho \"start webase-sign
    now...\"\njava ${JAVA_OPTS} -Djdk.tls.namedGroups=\"secp256k1\", -Duser.timezone=\"Asia/Shanghai\"
    -Djava.security.egd=file:/dev/./urandom, -Djava.library.path=/dist/conf -cp ${CLASSPATH}
    \ ${APP_MAIN}"
  wait-for-it.sh: |-
    #!/usr/bin/env bash
    # Use this script to test if a given TCP host/port are available

    WAITFORIT_cmdname=${0##*/}

    echoerr() { if [[ $WAITFORIT_QUIET -ne 1 ]]; then echo "$@" 1>&2; fi }

    usage()
    {
        cat << USAGE >&2
    Usage:
        $WAITFORIT_cmdname host:port [-s] [-t timeout] [-- command args]
        -h HOST | --host=HOST       Host or IP under test
        -p PORT | --port=PORT       TCP port under test
                                    Alternatively, you specify the host and port as host:port
        -s | --strict               Only execute subcommand if the test succeeds
        -q | --quiet                Don't output any status messages
        -t TIMEOUT | --timeout=TIMEOUT
                                    Timeout in seconds, zero for no timeout
        -- COMMAND ARGS             Execute command with args after the test finishes
    USAGE
        exit 1
    }

    wait_for()
    {
        if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
            echoerr "$WAITFORIT_cmdname: waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
        else
            echoerr "$WAITFORIT_cmdname: waiting for $WAITFORIT_HOST:$WAITFORIT_PORT without a timeout"
        fi
        WAITFORIT_start_ts=$(date +%s)
        while :
        do
            if [[ $WAITFORIT_ISBUSY -eq 1 ]]; then
                nc -z $WAITFORIT_HOST $WAITFORIT_PORT
                WAITFORIT_result=$?
            else
                (echo -n > /dev/tcp/$WAITFORIT_HOST/$WAITFORIT_PORT) >/dev/null 2>&1
                WAITFORIT_result=$?
            fi
            if [[ $WAITFORIT_result -eq 0 ]]; then
                WAITFORIT_end_ts=$(date +%s)
                echoerr "$WAITFORIT_cmdname: $WAITFORIT_HOST:$WAITFORIT_PORT is available after $((WAITFORIT_end_ts - WAITFORIT_start_ts)) seconds"
                break
            fi
            sleep 1
        done
        return $WAITFORIT_result
    }

    wait_for_wrapper()
    {
        # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692
        if [[ $WAITFORIT_QUIET -eq 1 ]]; then
            timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --quiet --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
        else
            timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
        fi
        WAITFORIT_PID=$!
        trap "kill -INT -$WAITFORIT_PID" INT
        wait $WAITFORIT_PID
        WAITFORIT_RESULT=$?
        if [[ $WAITFORIT_RESULT -ne 0 ]]; then
            echoerr "$WAITFORIT_cmdname: timeout occurred after waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
        fi
        return $WAITFORIT_RESULT
    }

    # process arguments
    while [[ $# -gt 0 ]]
    do
        case "$1" in
            *:* )
            WAITFORIT_hostport=(${1//:/ })
            WAITFORIT_HOST=${WAITFORIT_hostport[0]}
            WAITFORIT_PORT=${WAITFORIT_hostport[1]}
            shift 1
            ;;
            --child)
            WAITFORIT_CHILD=1
            shift 1
            ;;
            -q | --quiet)
            WAITFORIT_QUIET=1
            shift 1
            ;;
            -s | --strict)
            WAITFORIT_STRICT=1
            shift 1
            ;;
            -h)
            WAITFORIT_HOST="$2"
            if [[ $WAITFORIT_HOST == "" ]]; then break; fi
            shift 2
            ;;
            --host=*)
            WAITFORIT_HOST="${1#*=}"
            shift 1
            ;;
            -p)
            WAITFORIT_PORT="$2"
            if [[ $WAITFORIT_PORT == "" ]]; then break; fi
            shift 2
            ;;
            --port=*)
            WAITFORIT_PORT="${1#*=}"
            shift 1
            ;;
            -t)
            WAITFORIT_TIMEOUT="$2"
            if [[ $WAITFORIT_TIMEOUT == "" ]]; then break; fi
            shift 2
            ;;
            --timeout=*)
            WAITFORIT_TIMEOUT="${1#*=}"
            shift 1
            ;;
            --)
            shift
            WAITFORIT_CLI=("$@")
            break
            ;;
            --help)
            usage
            ;;
            *)
            echoerr "Unknown argument: $1"
            usage
            ;;
        esac
    done

    if [[ "$WAITFORIT_HOST" == "" || "$WAITFORIT_PORT" == "" ]]; then
        echoerr "Error: you need to provide a host and port to test."
        usage
    fi

    WAITFORIT_TIMEOUT=${WAITFORIT_TIMEOUT:-15}
    WAITFORIT_STRICT=${WAITFORIT_STRICT:-0}
    WAITFORIT_CHILD=${WAITFORIT_CHILD:-0}
    WAITFORIT_QUIET=${WAITFORIT_QUIET:-0}

    # Check to see if timeout is from busybox?
    WAITFORIT_TIMEOUT_PATH=$(type -p timeout)
    WAITFORIT_TIMEOUT_PATH=$(realpath $WAITFORIT_TIMEOUT_PATH 2>/dev/null || readlink -f $WAITFORIT_TIMEOUT_PATH)

    WAITFORIT_BUSYTIMEFLAG=""
    if [[ $WAITFORIT_TIMEOUT_PATH =~ "busybox" ]]; then
        WAITFORIT_ISBUSY=1
        # Check if busybox timeout uses -t flag
        # (recent Alpine versions don't support -t anymore)
        if timeout &>/dev/stdout | grep -q -e '-t '; then
            WAITFORIT_BUSYTIMEFLAG="-t"
        fi
    else
        WAITFORIT_ISBUSY=0
    fi

    if [[ $WAITFORIT_CHILD -gt 0 ]]; then
        wait_for
        WAITFORIT_RESULT=$?
        exit $WAITFORIT_RESULT
    else
        if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
            wait_for_wrapper
            WAITFORIT_RESULT=$?
        else
            wait_for
            WAITFORIT_RESULT=$?
        fi
    fi

    if [[ $WAITFORIT_CLI != "" ]]; then
        if [[ $WAITFORIT_RESULT -ne 0 && $WAITFORIT_STRICT -eq 1 ]]; then
            echoerr "$WAITFORIT_cmdname: strict mode, refusing to execute subprocess"
            exit $WAITFORIT_RESULT
        fi
        exec "${WAITFORIT_CLI[@]}"
    else
        exit $WAITFORIT_RESULT
    fi
  web-start.sh: |-
    #!/usr/bin/env bash

    # this script used in docker-compose
    echo "start webase-web now..."
    nginx -c /data/webase-web/nginx/nginx.conf -g 'daemon off;'
kind: ConfigMap
metadata:
  creationTimestamp: "2023-09-27T08:12:59Z"
  name: fisco-scripts
  namespace: fisco-bcos
  resourceVersion: "2152568"
  uid: f735eddf-208f-4d49-8cd5-f08d153406eb
